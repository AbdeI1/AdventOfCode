### Starting build.
# Target: Day2Code.ml.depends, tags: { extension:ml, file:Day2Code.ml, ocaml, ocamldep, quiet }
ocamldep.opt -modules Day2Code.ml > Day2Code.ml.depends
# Target: util.ml.depends, tags: { extension:ml, file:util.ml, ocaml, ocamldep, quiet }
ocamldep.opt -modules util.ml > util.ml.depends # cached
# Target: util.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:util.cmo, file:util.ml, implem, ocaml, quiet }
ocamlc.opt -c -o util.cmo util.ml # cached
# Target: Day2Code.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:Day2Code.cmo, file:Day2Code.ml, implem, ocaml, quiet }
ocamlc.opt -c -o Day2Code.cmo Day2Code.ml
+ ocamlc.opt -c -o Day2Code.cmo Day2Code.ml
File "Day2Code.ml", line 11, characters 6-348:
11 | ......let dir::dist_s::[] = List.map implode (split_by (fun x -> x = ' ') (explode h)) in
12 |         let dist = int_of_string dist_s in
13 |           match dir with
14 |           | "forward" -> helper (x + dist) y t
15 |           | "up" -> helper x (y - dist) t
16 |           | "down" -> helper x (y + dist) t
17 |           | _ -> raise (Failure "unexpected input")
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(_::_::_::_|_::[]|[])
File "Day2Code.ml", line 25, characters 6-375:
25 | ......let dir::dist_s::[] = List.map implode (split_by (fun x -> x = ' ') (explode h)) in
26 |         let dist = int_of_string dist_s in
27 |           match dir with
28 |           | "forward" -> helper (x + dist) (y + (aim*dist)) aim t
29 |           | "up" -> helper x y (aim - dist) t
30 |           | "down" -> helper x y (aim + dist) t
31 |           | _ -> raise (Failure "unexpected input")
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(_::_::_::_|_::[]|[])
# Target: Day2Code.byte, tags: { byte, dont_link_with, extension:byte, file:Day2Code.byte, link, ocaml, program, quiet }
ocamlc.opt util.cmo Day2Code.cmo -o Day2Code.byte
# Compilation successful.
